* Process
     pid_t fork(void);
	 
	 pid_t getpid(void);

     pid_t getppid(void);

* exec
     int
     execl(const char *path, const char *arg0, ... /*, (char *)0 */);

     int execle(const char *path, const char *arg0, ... /*, (char *)0, char *const envp[] */);

     int execlp(const char *file, const char *arg0, ... /*, (char *)0 */);

     int execv(const char *path, char *const argv[]);

     int execvp(const char *file, char *const argv[]);

     int execvP(const char *file, const char *search_path, char *const argv[]);

* exit
     void exit(int status);

* wait
     pid_t wait(int *stat_loc);

     pid_t wait3(int *stat_loc, int options, struct rusage *rusage);

     pid_t wait4(pid_t pid, int *stat_loc, int options, struct rusage *rusage);

     pid_t waitpid(pid_t pid, int *stat_loc, int options);

* Proseccor Affinity
    int t sched_setaffinity(pid_t pid, size_t cpusetsize, const cpu_set_t *mask);
    int sched_getaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);

* Thread
     int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)

     void pthread_exit(void *value_ptr);

	 int pthread_join(pthread_t thread, void **value_ptr);

     int pthread_mutex_lock(pthread_mutex_t *mutex);

     int pthread_mutex_unlock(pthread_mutex_t *mutex);

     int pthread_mutex_trylock(pthread_mutex_t *mutex);

     int pthread_detach(pthread_t thread);

     int pthread_mutex_destroy(pthread_mutex_t *mutex);
--
cat /proc/cpuinfo

